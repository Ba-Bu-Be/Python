from functools import total_ordering

@total_ordering
class RomanNumeral:
    def __init__(self, roman):
        self._roman_num = roman
        self._int_num = RomanNumeral.roman_to_int(roman)
    
    def __str__(self):
        return self._roman_num
        
    def __int__(self):
        return self._int_num
    
    def __add__(self, other):
        if isinstance(other, RomanNumeral):
            res = RomanNumeral.int_to_roman(self._int_num + other._int_num)
            return RomanNumeral(res)
        return NotImplemented
        
    def __sub__(self, other):
        if isinstance(other, RomanNumeral):
            res = RomanNumeral.int_to_roman(self._int_num - other._int_num)
            return RomanNumeral(res)
        return NotImplemented
    
    def __eq__(self, other):
        if isinstance(other, RomanNumeral):
            return self._int_num == other._int_num
        return NotImplemented
    
    def __lt__(self, other):
        if isinstance(other, RomanNumeral):
            return self._int_num < other._int_num
        return NotImplemented
    
    @staticmethod
    def int_to_roman(num):
        conv = {
            1: 'I',
            4: 'IV',
            5: 'V',
            9: 'IX',
            10: 'X',
            40: 'XL',
            50: 'L',
            90: 'XC',
            100: 'C',
            400: 'CD',
            500: 'D',
            900: 'CM',
            1000: 'M'
        }
        res = ''
        while num:
            if num in conv:
                res += conv[num]
                break
            number = tuple(filter(lambda x: x < num, conv))[-1]
            res += conv[number]
            num -= number
        return res
    
    @staticmethod
    def roman_to_int(num):
        conv = {
            'I': 1,
            'IV': 4,
            'V': 5,
            'IX': 9,
            'X': 10,
            'XL': 40,
            'L': 50,
            'XC': 90,
            'C': 100,
            'CD': 400,
            'D': 500,
            'CM': 900,
            'M': 1000
        }
        res = 0
        while num:
            if num[0:2] in conv:
                res += conv[num[0:2]]
                num = num[2:]
            elif num[0] in conv:
                res += conv[num[0]]
                num = num[1:]
        return res
        
    
